import asyncio
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from States.State import Reg
import socket
from keyboard.kbBuilder import make_row_inline_keyboards

router = Router()
global_data_store = {}


async def check_input_type(text):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∏–∑ 4 —Ü–∏—Ñ—Ä
    return text.isdigit() and len(text) == 4


@router.message(F.text == 'üîõ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ üñ•Ô∏è')
async def connected_ip(message: Message, state: FSMContext):
    await state.clear()

    await message.answer('–í–≤–µ–¥–∏—Ç–µ IP –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è: ')
    await state.set_state(Reg.connected_ip)


@router.message(Reg.connected_ip)
async def connected_ip_fsm(message: Message, state: FSMContext):
    await state.update_data(ip=message.text)

    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç: ')
    await state.set_state(Reg.connected_port)


@router.callback_query(F.data == 'connect_data')
async def connect_data(callback: CallbackQuery):
    await callback.message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..")
    await asyncio.sleep(10)
    await callback.message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å!')


@router.message(Reg.connected_port)
async def connected_port(message: Message, state: FSMContext):
    get_port = message.text

    if await check_input_type(get_port):
        await state.update_data(port=get_port)
        get_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
        global_data_store[message.from_user.id] = {
            "IP": f"{get_data['ip']}",
            "PORT": f"{get_data['port']}",
        }

        data_info = global_data_store[message.from_user.id]

        keyboard = [
            ("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", "connect_data"),
            ("–û—Ç–º–µ–Ω–∞", "back_data")
        ]

        await message.answer(f'IP: {data_info.get("IP")}\nPORT: {data_info.get("PORT")}', reply_markup=make_row_inline_keyboards(keyboard))

        # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–µ—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback
        # await state.clear()

    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π 4-—Ö –∑–Ω–∞—á–Ω—ã–π –ø–æ—Ä—Ç. (0000):')
        await state.set_state(Reg.connected_port)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥—Ä—É–≥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
@router.callback_query(F.data == 'connect_data')
async def connect_data(callback: CallbackQuery):
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    user_id = callback.from_user.id

    if user_id in global_data_store:
        data_info = global_data_store[user_id]
        await callback.message.answer(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {data_info['IP']} –Ω–∞ –ø–æ—Ä—Ç—É {data_info['PORT']}...")

        await asyncio.sleep(10)  # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await callback.message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å!')
        client.connect((data_info['IP'], data_info['PORT']))
    else:
        await callback.message.answer('–î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
