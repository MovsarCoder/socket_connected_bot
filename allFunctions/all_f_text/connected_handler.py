from keyboard.list_keyboards_info import connected_keyboard, keyboard_control_pc, keyboard_check_is_control, keyboard_control_youtube
from keyboard.kbBuilder import make_row_inline_keyboards
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import F, Router
from States.State import Reg
import socket

router = Router()
global_data_store = {}
client = None


async def check_input_type(text):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∏–∑ 4 —Ü–∏—Ñ—Ä
    return text.isdigit() and len(text) == 4


@router.message(F.text == 'üîõ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ üñ•Ô∏è')
async def connected_ip(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ IP –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è: ')
    await state.set_state(Reg.connected_ip)


@router.message(Reg.connected_ip)
async def connected_ip_fsm(message: Message, state: FSMContext):
    await state.update_data(ip=message.text)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç: ')
    await state.set_state(Reg.connected_port)


@router.message(Reg.connected_port)
async def connected_port(message: Message, state: FSMContext):
    get_port = message.text

    if await check_input_type(get_port):
        await state.update_data(port=get_port)
        get_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
        global_data_store[message.from_user.id] = {
            "ip": f"{get_data['ip']}",
            "port": int(get_data['port']),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ—Ä—Ç –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        }

        data_info = global_data_store[message.from_user.id]
        await message.answer(f'IP: {data_info.get("ip")}\nPORT: {data_info.get("port")}', reply_markup=make_row_inline_keyboards(connected_keyboard))
        await state.clear()

    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π 4-—Ö –∑–Ω–∞—á–Ω—ã–π –ø–æ—Ä—Ç. (0000):')
        await state.set_state(Reg.connected_port)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥—Ä—É–≥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
@router.callback_query(F.data == 'connect_data')
async def connect_data_func(callback: CallbackQuery):
    global client
    user_id = callback.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
    if user_id in global_data_store:
        data_info = global_data_store[user_id]
        await callback.message.edit_text(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {data_info.get('ip')} –Ω–∞ –ø–æ—Ä—Ç—É {data_info.get('port')}...")

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω—ã, —Ç–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        try:
            client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            client.connect((data_info.get('ip'), data_info.get('port')))
            await callback.message.edit_text('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å!', reply_markup=make_row_inline_keyboards(keyboard_check_is_control))
        # –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        except Exception as e:
            await callback.message.answer(f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}')
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É—Å–ø–µ—à–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    else:
        await callback.message.answer('–î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


# –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º
@router.message(F.text == "üì¥ –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å üñ•Ô∏è")
async def disconnect_handler(message: Message, state: FSMContext):
    await state.clear()
    global client
    if client:
        client.close()
        await message.answer('–í—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.')
    else:
        await message.answer('–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Ä–≤–µ—Ä—É.')


################################################################## –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–∫
@router.callback_query(F.data == 'control_pc')
async def control_pc_func(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–£—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: ', reply_markup=make_row_inline_keyboards(keyboard_control_pc))


# –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–∫
@router.callback_query(F.data == 'shutdown_data')
async def shutdown_data(callback: CallbackQuery):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä –∫ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å —Å –ø–æ–º–æ—â—å—é —Å–æ–∫–µ—Ç–æ–≤.
     –§—É–Ω–∫—Ü–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è shutdown (–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä).
      –ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.
      –¢–µ–º —Å–∞–º—ã–º –º—ã –º–æ–∂–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä –ª—é–±–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.
    """

    await callback.answer('')
    global client

    if client:
        try:
            client.send("shutdown_data".encode())
            await callback.message.answer('–ö–æ–º–ø—å—é—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω.')
        except Exception as e:
            await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        await callback.message.answer('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–∫–∏ "üîõ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ üñ•Ô∏è".')


# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–∫
@router.callback_query(F.data == 'reload_data')
async def restart_data(callback: CallbackQuery):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä –∫ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å —Å –ø–æ–º–æ—â—å—é —Å–æ–∫–µ—Ç–æ–≤.
     –§—É–Ω–∫—Ü–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è restart (–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä).
      –ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.
      –¢–µ–º —Å–∞–º—ã–º –º—ã –º–æ–∂–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä –ª—é–±–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.
    """

    await callback.answer('')
    global client

    if client:
        try:
            await callback.message.answer('–ö–æ–º–ø—å—é—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.')
            client.send('reload_data'.encode())
        except Exception as e:
            await callback.message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
    else:
        await callback.message.answer('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–∫–∏ "üîõ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ üñ•Ô∏è".')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. (–í—ã–∫–ª—é—á–µ–Ω–∏—è)
@router.callback_query(F.data == 'lock_screen_data')
async def look_screen_func(callback: CallbackQuery):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä –∫ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å —Å –ø–æ–º–æ—â—å—é —Å–æ–∫–µ—Ç–æ–≤.
     –§—É–Ω–∫—Ü–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è look_screen (–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ (–í—ã–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞)).
      –ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º. –ü–æ—Å–ª–µ —á–µ–≥–æ —ç–∫—Ä–∞–Ω —Å–Ω–æ–≤–æ –≤–∫–ª—é—á–∏—Ç—å—Å—è.
      –¢–µ–º —Å–∞–º—ã–º –º—ã –º–æ–∂–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ –≤—ã–∫–ª—é—á–∞—Ç—å —ç–∫—Ä–∞–Ω –ª—é–±–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.
    """

    await callback.answer('')
    global client

    if client:
        try:
            await callback.message.answer('–≠–∫—Ä–∞–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!!')
            client.send('lock_screen_data'.encode())
        except Exception as e:
            await callback.message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
    else:
        await callback.message.answer('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–∫–∏ "üîõ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ üñ•Ô∏è".')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ BSOD –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@router.callback_query(F.data == 'bsod_screen_brows_data')
async def blue_screen_in_brows(callback: CallbackQuery):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä –∫ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å —Å –ø–æ–º–æ—â—å—é —Å–æ–∫–µ—Ç–æ–≤.
     –§—É–Ω–∫—Ü–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è bsod_browser (–°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ (blue_screen_of_dead)).
      –ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ç–æ–∫ —Å–∏–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å–º–µ—Ä—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.
      –¢–µ–º —Å–∞–º—ã–º –º—ã –º–æ–∂–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ –≤—ã–∑–≤–∞—Ç—å —à—É—Ç–æ—á–Ω—ã–π —Å–ø–∞–º —Å–∏–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –ª—é–±–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.
    """

    await callback.answer('')
    global client

    if client:
        try:
            await callback.message.answer('–°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!')
            client.send('bsod_screen_brows_data'.encode())
        except Exception as e:
            await callback.message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
    else:
        await callback.message.answer('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–∫–∏ "üîõ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ üñ•Ô∏è".')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ BSOD –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω –∏ –±–µ–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–í—ã–∫–ª—é—á–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –¥—Ä.)
@router.callback_query(F.data == 'blue_screen_of_dead')
async def blue_screen(callback: CallbackQuery):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä –∫ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å —Å –ø–æ–º–æ—â—å—é —Å–æ–∫–µ—Ç–æ–≤.
     –§—É–Ω–∫—Ü–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è bsod_browser (–°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏ (blue_screen_of_dead)).
      –ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–∑–æ–≤–∞ —à—É—Ç–æ—á–Ω–æ–≥–æ —Å–∏–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å–º–µ—Ä—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.
      –¢–µ–º —Å–∞–º—ã–º –º—ã –º–æ–∂–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ –≤—ã–∑–≤–∞—Ç—å —à—É—Ç–æ—á–Ω—ã–π —Å–∏–Ω–∏–π —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –ª—é–±–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.
    """

    await callback.answer('')
    global client

    if client:
        try:
            await callback.message.answer('–°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!')
            client.send('blue_screen_of_dead'.encode())
        except Exception as e:
            await callback.message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
    else:
        await callback.message.answer('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–∫–∏ "üîõ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ üñ•Ô∏è".')


# –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫–∞–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º
@router.callback_query(F.data == 'screenshot_user')
async def screenshot_user_func(callback: CallbackQuery):
    """
    –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∫–∞–º–µ—Ä–∞
    –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –µ—Å—Ç—å, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–µ–ª–∞–µ—Ç —Ñ–æ—Ç–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º —Ñ–æ—Ç–∫—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """

    await callback.answer('')
    global client

    if client:
        try:
            client.send('screenshot_user'.encode())
        except Exception as e:
            await callback.message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
    else:
        await callback.message.answer('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–∫–∏ "üîõ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ üñ•Ô∏è".')


################################################################## –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Youtube


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Youtube
@router.callback_query(F.data == 'control_youtube')
async def control_youtube_keyboard(callback: CallbackQuery):
    """
    """

    await callback.answer('')
    await callback.message.edit_text('–î–æ—Å—Ç—É–ø–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã Youtube: ', reply_markup=make_row_inline_keyboards(keyboard_control_youtube))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Youtube
@router.callback_query(F.data == 'open_youtube_data')
async def open_youtube_func(callback: CallbackQuery):
    """
    """

    await callback.answer('')
    if client:
        try:
            await callback.message.answer('Youtube —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç.')
            client.send('youtube'.encode())
        except Exception as e:
            await callback.message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
    else:
        await callback.message.answer('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–∫–∏ "üîõ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ üñ•Ô∏è".')
