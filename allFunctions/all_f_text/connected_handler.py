import asyncio
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from States.State import Reg, Form
import socket
from keyboard.kbBuilder import make_row_inline_keyboards

router = Router()
global_data_store = {}
client = None


async def send_messages():
    global client
    while True:
        await asyncio.sleep(0.1)


async def check_input_type(text):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∏–∑ 4 —Ü–∏—Ñ—Ä
    return text.isdigit() and len(text) == 4


@router.message(F.text == 'üîõ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ üñ•Ô∏è')
async def connected_ip(message: Message, state: FSMContext):
    await state.clear()

    await message.answer('–í–≤–µ–¥–∏—Ç–µ IP –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è: ')
    await state.set_state(Reg.connected_ip)


@router.message(Reg.connected_ip)
async def connected_ip_fsm(message: Message, state: FSMContext):
    await state.update_data(ip=message.text)

    await message.answer('–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç: ')
    await state.set_state(Reg.connected_port)


@router.message(Reg.connected_port)
async def connected_port(message: Message, state: FSMContext):
    get_port = message.text

    if await check_input_type(get_port):
        await state.update_data(port=get_port)

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è inline-keyboard –∏–∑ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        # [("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏", "callback_data –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–æ–π")]
        keyboard = [
            ("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", "connect_data"),
            ("–û—Ç–º–µ–Ω–∞", "back_data")
        ]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–æ—Å—Ç–æ—è–Ω–∏–π)
        get_data = await state.get_data()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
        global_data_store[message.from_user.id] = {
            "ip": f"{get_data['ip']}",
            "port": int(get_data['port']),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ—Ä—Ç –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        }

        data_info = global_data_store[message.from_user.id]
        await message.answer(f'IP: {data_info.get("ip")}\nPORT: {data_info.get("port")}', reply_markup=make_row_inline_keyboards(keyboard))

        # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–µ—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback
        await state.clear()

    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π 4-—Ö –∑–Ω–∞—á–Ω—ã–π –ø–æ—Ä—Ç. (0000):')
        await state.set_state(Reg.connected_port)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥—Ä—É–≥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
@router.callback_query(F.data == 'connect_data')
async def connect_data_func(callback: CallbackQuery, state: FSMContext):
    global client
    user_id = callback.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
    if user_id in global_data_store:
        data_info = global_data_store[user_id]
        await callback.message.answer(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {data_info.get('ip')} –Ω–∞ –ø–æ—Ä—Ç—É {data_info.get('port')}...")

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω—ã, —Ç–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ —Å–æ–∫–µ—Ç–∞–º –∫ IP
            client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            client.connect((data_info.get('ip'), data_info.get('port')))
            await callback.message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å!')

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(Form.connected)

            asyncio.create_task(send_messages())

        # –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        except Exception as e:
            await callback.message.answer(f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}')

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É—Å–ø–µ—à–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    else:
        await callback.message.answer('–î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


@router.message(Form.connected)
async def send_message(message: Message, ):
    global client
    if client:
        try:
            client.send(message.text.encode())
            await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.text}')
        except Exception as e:
            await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
    else:
        await message.answer('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–∫–∏ "üîõ –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ üñ•Ô∏è".')


# @router.message(F.text == "üì¥ –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å üñ•Ô∏è")
# async def disconnect_handler(message: Message, state: FSMContext):
#     await state.clear()
#     global client
#     if client:
#         client.close()
#         await message.answer('–í—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.')
#         await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#     else:
#         await message.answer('–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Ä–≤–µ—Ä—É.')
