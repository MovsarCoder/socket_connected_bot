import platform
import time

from aiogram import F, Router
from aiogram.types import Message
import psutil

router = Router()


@router.message(F.text == '‚öôÔ∏è –ú–æ—è OC (–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –°–∏—Å—Ç–µ–º–∞)')
async def get_info_oc(message: Message):
    info = {
        "–°–∏—Å—Ç–µ–º–∞": platform.system(),
        "–ò–º—è —É–∑–ª–∞": platform.node(),
        "–í–µ—Ä—Å–∏—è": platform.release(),
        "–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è": platform.version(),
        "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞": platform.architecture()[0],
        "–¢–∏–ø –º–∞—à–∏–Ω—ã": platform.machine(),
        "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä": platform.processor(),
    }

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    formatted_info = "\n".join([f"<b>{key}:</b> {value}" for key, value in info.items()])

    await message.answer(f'‚öôÔ∏è –ú–æ—è OC (–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –°–∏—Å—Ç–µ–º–∞) \n\n{formatted_info}', parse_mode='HTML')


    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö
    cpu_usage = psutil.cpu_percent()
    memory_usage = psutil.virtual_memory().percent
    uptime_seconds = int(psutil.boot_time())
    uptime = str(psutil.boot_time())

    uptime = int(time.time() - uptime_seconds)
    hours, remainder = divmod(uptime, 3600)
    minutes, seconds = divmod(remainder, 60)
    uptime_formatted = f"{hours} —á {minutes} –º–∏–Ω {seconds} —Å–µ–∫"
    await message.answer('"üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:**\n\n**CPU:** {cpu_usage}%\n**–ü–∞–º—è—Ç—å:** {memory_usage}%\n**–ê–ø—Ç–∞–π–º:** {uptime_formatted}"')
