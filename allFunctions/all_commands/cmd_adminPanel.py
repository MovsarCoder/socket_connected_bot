from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from States.State import *
from allFunctions.functions.helper_func import *
from keyboard.kbBuilder import *
from keyboard.list_keyboards_info import back_keyboard, admin_keyboard

router = Router()


@router.message(Command("admin_panel"))
@router.message(F.text == 'üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
async def admin_panel_router(message: Message):
    admin_users_list = checked_admin_list()
    if message.from_user.id in admin_users_list:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=make_row_inline_keyboards(admin_keyboard))
    else:
        await message.answer(f'{message.from_user.full_name}({message.from_user.id}) –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Admin —Ñ—É–Ω–∫—Ü–∏—è–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞! –¢–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å Admin!')


@router.callback_query(F.data == 'new_admin_data')
async def new_admin_user_func(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –∞–¥–º–∏–Ω', reply_markup=make_row_inline_keyboards(back_keyboard))
    await state.set_state(Admin.new_admin)


@router.message(Admin.new_admin)
async def add_admin_id(message: Message, state: FSMContext):
    await state.update_data(id=message.text)
    try:
        a = add_new_admin_db(message.text)
        # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if a:
            # print('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω.', reply_markup=make_row_inline_keyboards(admin_keyboard))
            await state.clear()
        # –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–∞–Ω–Ω–æ–º—É ID
        else:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç—Ç–æ–º—É ID –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–æ–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=make_row_inline_keyboards(admin_keyboard))
    except ValueError as e:
        await message.answer(f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {e}', reply_markup=make_row_inline_keyboards(admin_keyboard))


@router.callback_query(F.data == 'remove_admin_list_data')
async def remove_admin_func(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup=make_row_inline_keyboards(back_keyboard))
    await state.set_state(Admin.remove_admin)


@router.message(Admin.remove_admin)
async def remove_admin(message: Message, state: FSMContext):
    try:
        if remove_admin_from_db(message.text):
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text} –±—ã–ª —É–¥–∞–ª–µ–Ω!', reply_markup=make_row_inline_keyboards(admin_keyboard))
            await state.clear()
        else:
            # –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.', reply_markup=make_row_inline_keyboards(admin_keyboard))

    except ValueError as e:
        await message.answer(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {e}', reply_markup=make_row_inline_keyboards(admin_keyboard))


@router.callback_query(F.data == 'add_new_group_username_data')
async def add_new_group_username_db(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è @)!',
                                  reply_markup=make_row_inline_keyboards(back_keyboard))
    await state.set_state(Admin.add_new_group_username)


@router.message(Admin.add_new_group_username)
async def fsm_add_new_group_username(message: Message, state: FSMContext):
    await message.answer(f'–•–æ—Ä–æ—à–æ! Username: {message.text}; –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ!')
    await state.update_data(add_new_group_username=message.text)
    await state.set_state(Admin.add_new_group_name)


@router.message(Admin.add_new_group_name)
async def fsm_add_new_group_name(message: Message, state: FSMContext):
    await state.update_data(add_new_group_name=message.text)
    information_group = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
    group_data = {
        'username': information_group['add_new_group_username'],
        'name': information_group['add_new_group_name']
    }

    # –ï—Å–ª–∏ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º Username –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–≤–æ–¥–∏—Ç—Å—è –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    if not writer_group_to_json(group_data):
        await message.answer(f'–û—à–∏–±–∫–∞! –ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {group_data["username"]}', reply_markup=make_row_inline_keyboards(admin_keyboard))
        return False

    # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ –∏ Username —Å–≤–æ–±–æ–¥–µ–Ω, –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è.
    await message.answer(f'–û—Ç–ª–∏—á–Ω–æ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:\nUsername: {group_data["username"]}\nName: {group_data["name"]}', reply_markup=make_row_inline_keyboards(admin_keyboard))
    await state.clear()


@router.callback_query(F.data == 'delete_group_data')
async def remove_group_db_func(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.answer('Send username in the remove group/chanel (dont use "@")',
                                  reply_markup=make_row_inline_keyboards(back_keyboard))
    await state.set_state(Admin.delete_group)


@router.message(Admin.delete_group)
async def fsm_remove_group_db(message: Message, state: FSMContext):
    try:
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ª–æ–≤–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = message.text
        # –ï—Å–ª–∏ —Å –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Username –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –æ–Ω–∞ —É–¥–∞–ª–∏—Ç—Å—è.
        remove_func = remove_group_from_json(message_text)
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è remove_func –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True - –≥—Ä—É–ø–ø–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        if remove_func:
            await message.answer(f'–ì—Ä—É–ø–ø–∞ —Å Username: {message_text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!', reply_markup=make_row_inline_keyboards(admin_keyboard))
            await state.clear()
        # –ï—Å–ª–∏ —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç.
        else:
            await message.answer('–û—à–∏–±–∫–∞! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É —Å —Ç–∞–∫–∏–º Username!', reply_markup=make_row_inline_keyboards(admin_keyboard))

    except KeyError as e:
        await message.answer(f'–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ 3453-234567 - {e}!')


@router.callback_query(F.data == 'list_group_data')
async def group_list_db(callback: CallbackQuery):
    await callback.answer('')
    groups = load_from_json()
    keyboard = []

    # –µ—Å–ª–∏ –≤ JSON-—Ñ–∞–π–ª–µ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, –≤—ã–≤–µ–¥–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not groups:
        await callback.message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.", reply_markup=make_row_inline_keyboards(back_keyboard))
        return
    # –µ—Å–ª–∏ –≤ JSON-—Ñ–∞–π–ª–µ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ –∏–∑ –Ω–µ–µ —Å–æ–∑–¥–∞—Å—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    for group in groups:
        keyboard.append([InlineKeyboardButton(text=f'{group["name"]}', url=f'https://t.me/{group["username"]}')])

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    keyboard.append([InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥', callback_data='back_data2')])
    keyboard_list = InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    await callback.message.edit_text('–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:', reply_markup=keyboard_list)


@router.callback_query(F.data == 'back_data2')
async def back_func_2(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', show_alert=True, reply_markup=make_row_inline_keyboards(admin_keyboard))
